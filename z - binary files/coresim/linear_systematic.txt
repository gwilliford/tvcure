function (b_sims, newdata, inc_intercept = TRUE) 
{
    newdata <- non_linear_transformer(x = newdata, b_sims = b_sims)
    newdata <- factorise(x = newdata, b_sims = b_sims)
    fitted_names <- names(newdata)
    if (!("intercept_" %in% names(b_sims))) 
        inc_intercept <- FALSE
    if (!all(fitted_names %in% names(b_sims))) 
        stop("Unable to find all of the variables from newdata in b_sims.", 
            call. = FALSE)
    if (!all(sapply(newdata, class) %in% c("numeric", "integer"))) 
        stop("All fitted values must be either numeric or integer.", 
            call. = FALSE)
    newdata <- interaction_builder(b_sims = b_sims, newdata = newdata)
    fitted_names <- names(newdata)
    intercept <- b_sims[["intercept_"]]
    not_fitted_0 <- data.matrix(b_sims[, fitted_names])
    sims_fitted <- list(not_fitted_0, data.matrix(newdata))
    if (inc_intercept) {
        ls <- lapply(1:nrow(sims_fitted[[2]]), function(x) {
            fitted_1 <- sims_fitted[[2]][x, ]
            data.frame(data.frame(t(fitted_1)), ls_ = intercept + 
                (sims_fitted[[1]] %*% fitted_1))
        })
    }
    else {
        ls <- lapply(1:nrow(sims_fitted[[2]]), function(x) {
            fitted_1 <- sims_fitted[[2]][x, ]
            data.frame(data.frame(t(fitted_1)), ls_ = (sims_fitted[[1]] %*% 
                fitted_1))
        })
    }
    ls <- data.frame(bind_rows(ls))
    return(ls)
}