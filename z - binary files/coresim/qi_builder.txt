function (obj, newdata, FUN, ci = 0.95, nsim = 1000, slim = FALSE, 
    large_computation = FALSE, original_order = FALSE, b_sims, 
    mu, Sigma, verbose = TRUE, ...) 
{
    qi_ <- NULL
    ci <- ci_check(ci)
    if (!missing(obj)) 
        b_sims <- b_sim(obj = obj, nsim = nsim)
    else if (missing(obj) & !missing(b_sims)) 
        b_sims <- b_sims
    else if (missing(obj) & missing(b_sims) & !missing(mu) & 
        !missing(Sigma)) 
        b_sims <- b_sim(mu = mu, Sigma = Sigma, nsim = nsim)
    if (missing(newdata) & !missing(obj)) 
        newdata <- find_scenarios(obj = obj, nsim = nsim, large_computation = large_computation)
    if (missing(newdata) & missing(obj)) 
        stop("At least one of obj and newdata must be supplied to find simulation scenarios.")
    qi_df <- linear_systematic(b_sims = b_sims, newdata = newdata, 
        ...)
    if (missing(FUN)) {
        if (verbose) 
            message("Note: FUN argument missing -> assuming b_sims is from a normal linear model.\\n")
        names(qi_df)[grep("ls_", names(qi_df))] <- "qi_"
    }
    else {
        FUN_check(FUN)
        temp_qi <- FUN(qi_df[["ls_"]])
        FUN_results_check(temp_qi)
        qi_df[, "qi_"] <- temp_qi
        qi_df["ls_"] <- NULL
    }
    if (ci < 1) {
        if (original_order) {
            orig_order <- unique(qi_df[, 1:(ncol(qi_df) - 1)])
            orig_order <- apply(orig_order, 1, paste, collapse = ".")
        }
        qi_df$scenario_ <- interaction(qi_df[, 1:(ncol(qi_df) - 
            1)])
        if (original_order) 
            qi_df$scenario_ <- factor(qi_df$scenario_, levels = orig_order)
        qi_df <- qi_central_interval(qi_df, scenario_var = "scenario_", 
            qi_var = "qi_", ci = ci)
        if (!isTRUE(slim)) 
            qi_df$scenario_ <- NULL
    }
    if (slim) 
        qi_df <- qi_slimmer(qi_df)
    return(qi_df)
}